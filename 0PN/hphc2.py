import numpy as np
import matplotlib.pyplot as plt

import h0CpxSpx2
import h05CpxSpx2
import h1CpxSpx2

C = 299792458.
G = 6.67408*1e-11
Mo = 1.989*1e30
Mpc = 3.086*1e22

#(* Euler-Gamma constant. Appears in 3PN corrections *) 
gamma = 0.5772156649 

class Fn:
    def __init__(self, iota_, beta_, D_, m1_, m2_, f_, f0_, Fp_, Fc_, et0_, phic_, tc_ ):

        self.iota_ = iota_
        self.beta_ = beta_
        self.D_ = D_*Mpc
        self.m1_ = m1_*Mo
        self.m2_ = m2_*Mo
        self.f0_ = f0_
        self.Fp_ = Fp_
        self.Fc_ = Fc_
        self.et0_ = et0_
        self.phic_ = phic_
        self.tc_ = tc_
        self.f_ = f_

    #defining unit-step function 
    def unitstep(self,lp,ff,f):
        if lp*ff-2*f>=0:
            return(1)
        else:
            return(0)
    
    #check which of the harmonics at a particular frequency (2*Pi*Omega=f/l) exceeds the  
    def uniarray(self, l, ff, f):
        lx = np.arange(1,11,1)
        for i in range(10):
            lx[i] = self.unitstep(l[i], ff, f)

        return(lx)
    
    def k_(self):
        l = np.arange(1,11,1)
        m1 = self.m1_
        m2 = self.m2_
        M = m1 + m2
        eta = (m1*m2)/(M**2)
        f = self.f_
        f0 = self.f0_
        et0 = self.et0_
        chi = f/f0  
        
        x = ((G*M*2*np.pi*f)/( C**3 * l))**(2/3)
        
        k = (x**2 * (27/2 - 7*eta + et0**6 * (1589015535/(5175296*chi**7) - (110496315*eta)/(184832*chi**7) + 498132560585/(1614692352*chi**(19/3)) + (168333575*eta)/(1478656*chi**(19/3)) - 908911888607/(1816528896*chi**(44/9)) + (4154545993*eta)/(4990464*chi**(44/9)) - 892815840919/(1816528896*chi**(38/9)) - (301299733*eta)/(4990464*chi**(38/9)) + 3110697122471/(14532231168*chi**(25/9)) - (12075357445*eta)/(39923712*chi**(25/9)) + 17781607555/(69866496*chi**(19/9)) - (82799465*eta)/(2495232*chi**(19/9))) + et0**4 * ( - (6830363/(153216*chi**(44/9))) + (474967*eta)/(5472*chi**(44/9)) - 268677653/(3983616*chi**(38/9)) - (90671*eta)/(10944*chi**(38/9)) + 18185905/(284544*chi**(25/9)) - (267133*eta)/(2736*chi**(25/9)) + 34967929/(306432*chi**(19/9)) - (162827*eta)/(10944*chi**(19/9))) + et0**2 * (2833/(336*chi**(25/9)) - (197*eta)/(12*chi**(25/9)) + 10523/(336*chi**(19/9)) - (49*eta)/(12*chi**(19/9)))) + x * (3 + et0**4 * ( - (2411/(304*chi**(38/9))) + 3323/(304*chi**(19/9))) + et0**6 * (1682685/(46208*chi**(19/3)) - 8011753/(138624*chi**(38/9)) + 1689785/(69312*chi**(19/9))) + (3 * et0**2)/chi**(19/9)) + x**(5/2) * ( - ((377 * et0**2*np.pi*( - 1 + chi))/(24*chi**(28/9))) - (et0**4 * np.pi*(3635788 - 2258257*chi - 3883073*chi**(19/9) + 2505542*chi**(28/9)))/(43776*chi**(47/9)) - (et0**6 * np.pi*( - 331142311890 + 189286331247*chi + 446685572185*chi**(19/9) - 217621452319*chi**(28/9) - 161105816843*chi**(38/9) + 73897677620*chi**(47/9)))/(578893824*chi**(22/3))) + x**3 * (1/32*(2160 - 5192*eta + 123*np.pi**2*eta + 224*eta**2) + 1/(1016064*chi**(31/9)) * et0**2 * ( - 1193251 - 22282512*eta + 42700560*eta**2 + 89434977*chi**(2/3) - 185795232*eta*chi**(2/3) + 22703856*eta**2*chi**(2/3) + 285923842*chi**(4/3) - 477003408*eta*chi**(4/3) + 12692862*np.pi**2*eta*chi**(4/3) - 3424512*eta**2*chi**(4/3)) + 1/(84325183488*chi**(50/9)) * et0**4 * ( - 4759063292165 + 30348860970792*eta - 38763744107088*eta**2 - 31968879219858*chi**(2/3) + 58318046249232*eta*chi**(2/3) + 7646159215968*eta**2*chi**(2/3) - 31736268138496*chi**(4/3) + 45889671128952*eta*chi**(4/3) - 1650389381550*np.pi**2*eta*chi**(4/3) + 219411602592*eta**2*chi**(4/3) + 2043730880707*chi**(19/9) - 27141856655592*eta*chi**(19/9) + 35073241576464*eta**2*chi**(19/9) + 56262861824610*chi**(25/9) - 93285988260024*eta*chi**(25/9) + 11206302010176*eta**2*chi**(25/9) + 86461368353906*chi**(31/9) - 144242491555344*eta*chi**(31/9) + 3838232618766*np.pi**2*eta*chi**(31/9) - 1035548457216*eta**2*chi**(31/9)) + 1/(3999037501734912*chi**(23/3)) * et0**6 * (3279894679024104960 - 16631859540896308800*eta + 19202503791507079680*eta**2 + 10402025549836075155*chi**(2/3) - 16414748179030197360*eta*chi**(2/3) - 7473844435281260400*eta**2*chi**(2/3) + 6636901757399139267*chi**(4/3) - 6647849008784363016*eta*chi**(4/3) + 341159644201429872*np.pi**2*eta*chi**(4/3) + 623118469564347120*eta**2*chi**(4/3) - 4220015697065866256*chi**(19/9) + 21692272309533291648*eta*chi**(19/9) - 23329096412641114368*eta**2*chi**(19/9) - 17016310487961012648*chi**(25/9) + 26221595034201700224*eta*chi**(25/9) + 3477817715529865344*eta**2*chi**(25/9) - 10967800378519109632*chi**(31/9) + 15859103224796779584*eta*chi**(31/9) - 570361367148627600*np.pi**2*eta*chi**(31/9) + 75826894562974464*eta**2*chi**(31/9) + 493039468942823701*chi**(38/9) - 6093524899450135056*eta*chi**(38/9) + 7224047870706816240*eta**2*chi**(38/9) + 8936345368795116909*chi**(44/9) - 13792229587322482296*eta*chi**(44/9) + 1646334720273668880*eta**2*chi**(44/9) + 9145059780731944160*chi**(50/9) - 15256596481285635840*eta*chi**(50/9) + 405971677516073760*np.pi**2*eta*chi**(50/9) - 109530449579765760*eta**2*chi**(50/9))) )
        
        return(k)
    
    #eccentricity
    def eccn(self):
        f = self.f_
        f0 = self.f0_
        et0 = self.et0_
        chi = f/f0

        ################COMMON_START#########################
        et = et0**3*( - (3323/(1824*chi**(19/6))) + 3323/(1824*chi**(19/18)) ) + \
        et0**5*( 50259743/(6653952*chi**(95/18)) - 11042329/(1108992*chi**(19/6)) + 15994231/(6653952*chi**(19/18)) ) + \
        et0/chi**(19/18)
            
        return(et)
    
        #fourier phase
    def psi_l(self, n):
        l = np.arange(1,11,1)
        k = self.k_()
        
        phic = self.phic_
        tc = self.tc_ 
        m1 = self.m1_
        m2 = self.m2_
        M = m1 + m2
        eta = (m1*m2)/(M**2)
        f = self.f_
        f0 = self.f0_
        et0 = self.et0_
        chi = f/f0     
        
        try:
            x = np.power(((G*M*2*np.pi*f)/( C**3*(l - (l + n)*k/(1 + k)))),(2/3))

            psi = - 2*np.pi*f*tc + (l - (l + n)*k/(1 + k))*phic - 1/(256*x**(5/2)*eta)*3*l * \
(1 + \
\
x**(3/2) * ( - 16*np.pi + et0**2 * ( - ((295945*np.pi)/(35088*chi**(28/9))) + (65561*np.pi)/(4080*chi**(19/9))) + et0**4 * ((1968982405*np.pi)/(35961984*chi**(47/9)) - (6211173025*np.pi)/(102085632*chi**(38/9)) - (3048212305*np.pi)/(64000512*chi**(28/9)) + (217859203*np.pi)/(3720960*chi**(19/9))) + et0**6 * ( - ((28409259125*np.pi)/(79847424*chi**(22/3))) + (30628811474315*np.pi)/(97254162432*chi**(19/3)) + (33366234820475*np.pi)/(65594658816*chi**(47/9)) - (20639727962075*np.pi)/(46551048192*chi**(38/9)) - (126468066221755*np.pi)/(846342770688*chi**(28/9)) + (22156798877*np.pi)/(169675776*chi**(19/9)))) + \
\
x * ( - (2585/756) - (25*n)/(3*l) + (55*eta)/9 + et0**6 * (( - (213483902125/1117863936) + (14845156625*eta)/39923712)/chi**7 + (223015085012407/2254879424512 + (13164724715*n)/(71320832*l) - (7378552295*eta)/32530432)/chi**(19/3) + (1968906345873305/5969113952256 - (8999675405695*eta)/16398664704)/chi**(44/9) + ( - (862351154377229525/6373211704344576) - (749497416275*n)/(2742610176*l) + (4063675549105*eta)/13134901248)/chi**(38/9) + ( - (2441897241139735/21246121967616) + (9479155594325*eta)/58368466944)/chi**(25/9) + (116789025584125/3112412663808 + (8448925*n)/(99072*l) - (216909251525*eta)/2585060352)/chi**(19/9)) + et0**4 * ((14796093245/503467776 - (1028884705*eta)/17980992)/chi**(44/9) + ( - (259509826776175/13976341456896) - (225548425*n)/(6014496*l) + (1222893635*eta)/28804608)/chi**(38/9) + ( - (14275935425/416003328) + (209699405*eta)/4000032)/chi**(25/9) + (229668231175/13650932736 + (315685*n)/(8256*l) - (426556895*eta)/11337984)/chi**(19/9)) + et0**2 * (( - (2223905/491232) + (154645*eta)/17544)/chi**(25/9) + (69114725/14968128 + (1805*n)/(172*l) - (128365*eta)/12432)/chi**(19/9))) + \
\
x**2 * ( - (48825515/508032) - (31805*n)/(252*l) + (22105/504 - (10*n)/l)*eta + (3085*eta**2)/72 + et0**6 * (( - (26945014260125/52819070976) + (17350371000625*eta)/6707183616 - (357715525375*eta**2)/119771136)/chi**(23/3) + (1/(chi**7))*(631801735840149031/757639486636032 + (37295665117595*n)/(23963799552*l) + ( - (167443372657006267/47352467914752) - (2593450768855*n)/(855849984*l))*eta + (1453574802115*eta**2)/390365184) + (1/(chi**(19/3)))*(2231629798479149401848091/2016195625924690968576 + (7565563411268608153*n)/(6689612285411328*l) + (3733620624128821835/13379224570822656 + (7557465734101975*n)/(6126018576384*l))*eta - (173415564792655*eta**2)/148551696384) + (43949506831840859555/63177102070677504 - (1344731894414361455*eta)/376054178992128 + (7946157848161165*eta**2)/2066231752704)/chi**(50/9) + (1/(chi**(44/9)))*( - (97831425453010633563475/83514566173731323904) - (85028471563286725*n)/(35939163746304*l) + (132713522808330046295/28679452669550592 + (388656700668275*n)/(98733966336*l))*eta - (2107245064767505*eta**2)/472856444928) + (1/(chi**(38/9)))*( - (1193205495087383514152561/777567083994785710080) - (333815911878457549195*n)/(205705577776398336*l) + ( - (139449015255055034899/2314187749984481280) - (2180322429577675295*n)/(1695375641014272*l))*eta + (675785495945689*eta**2)/515614740480) + ( - (387035983120116605285/5846592827536441344) + (1095104635088909345*eta)/1338505683959808 - (185468261986684025*eta**2)/191215097708544)/chi**(31/9) + (1/(chi**(25/9)))*(214994976177874485475/652560888744640512 + (15553485612355*n)/(20771831808*l) + ( - (14009852235779987735/11652873013297152) - (60376787225*n)/(57065472*l))*eta + (1550053258427425*eta**2)/1488994762752) + (1/(chi**(19/9)))*(194749034542453075/425320718303232 + (546781247071525*n)/(1048057325568*l) + ( - (122213388638482025/1364570637889536) + (61744532676875*n)/(262014331392*l))*eta - (18060683996675*eta**2)/61262936064)) + et0**4 * ((3654447011975/98224939008 - (4300262795285*eta)/18124839936 + (392328884035*eta**2)/1294631424)/chi**(50/9) + (1/(chi**(44/9)))*( - (735191339256903775/7044076094275584) - (638978688025*n)/(3031305984*l) + (55579511401449335/125787073112064 + (44433039725*n)/(108260928*l))*eta - (240910046095*eta**2)/518482944) + (1/(chi**(38/9)))*( - (359074780345285439107/1705190973672775680) - (100456187745548465*n)/(451108723193856*l) + ( - (41964795442387913/5074973135930880) - (656130734149165*n)/(3717929037312*l))*eta + (203366083643*eta**2)/1130734080) + ( - (94372278903235/7251965779968) + (126823556396665*eta)/733829870592 - (20940952805*eta**2)/93768192)/chi**(31/9) + (1/(chi**(25/9)))*(1256913822951125/12777273040896 + (1727660975*n)/(7727616*l) + ( - (1182697961961875/3194318260224) - (25377635*n)/(74304*l))*eta + (34290527545*eta**2)/102041856) + (1/(chi**(19/9)))*(382978332618985/1865441746944 + (1075257552895*n)/(4596742656*l) + ( - (240335362454795/5984958938112) + (121422004625*n)/(1149185664*l))*eta - (35516739065*eta**2)/268697088)) + et0**2 * ((936702035/1485485568 + (3062285*eta)/260064 - (14251675*eta**2)/631584)/chi**(31/9) + (195802015925/15087873024 + (5113565*n)/(173376*l) + ( - (3656612095/67356576) - (355585*n)/(6192*l))*eta + (25287905*eta**2)/447552)/chi**(25/9) + (115250777195/2045440512 + (323580365*n)/(5040288*l) + ( - (72324815665/6562454976) + (36539875*n)/(1260072*l))*eta - (10688155*eta**2)/294624)/chi**(19/9))) + \
 \
 et0**6 * ( - (75356125/(3326976*chi**(19/3))) + 17355248095/(455518464*chi**(38/9)) - 1326481225/(101334144*chi**(19/9))) + et0**4 * (5222765/(998944*chi**(38/9)) - 2608555/(444448*chi**(19/9))) - (2355*et0**2)/(1462*chi**(19/9)) + \
\
x**(5/2) * ((14453*np.pi)/756 - (32*n*np.pi)/l +et0**2 * (( - ((7063901*np.pi)/520128) + (149064749*np.pi*eta)/2210544)/chi**(34/9) + ((26056251325*np.pi)/1077705216 + (680485*n*np.pi)/(12384*l) - (48393605*np.pi*eta)/895104)/chi**(28/9) + ((185734313*np.pi)/4112640 - (12915517*np.pi*eta)/146880)/chi**(25/9) + ( - ((458370775*np.pi)/6837264) - (4909969*n*np.pi)/(46512*l) + (15803101*np.pi*eta)/229824)/chi**(19/9)) +et0**4 * (((14896370333*np.pi)/61544448 - (351697861441*np.pi*eta)/476969472)/chi**(53/9) + ( - ((7525784976509075*np.pi)/38703714803712) - (85031756225*n*np.pi)/(216521856*l) + (461030900395*np.pi*eta)/1036965888)/chi**(47/9) + ( - ((17596253179825*np.pi)/51451158528) + (1223601085925*np.pi*eta)/1837541376)/chi**(44/9) + ((34901256494241693175*np.pi)/79386134731997184 + (84423313781887*n*np.pi)/(193345546752*l) - (15387742160333*np.pi*eta)/39404703744)/chi**(38/9) + ( - ((2408172473789*np.pi)/6790791168) + (992200223893*np.pi*eta)/1697697792)/chi**(34/9) + ((268377522549925*np.pi)/1965734313984 + (368891935*n*np.pi)/(1188864*l) - (498450665645*np.pi*eta)/1632669696)/chi**(28/9) + ((238457223541*np.pi)/696563712 - (17513506613*np.pi*eta)/33488640)/chi**(25/9) + ( - ((1523166085325*np.pi)/6235584768) - (16315826987*n*np.pi)/(42418944*l) + (52513704623*np.pi*eta)/209599488)/chi**(19/9)) +et0**6 * (( - ((34512939466525*np.pi)/13414367232) + (22598442827675*np.pi*eta)/3353591808)/chi**8 + ((6467437465359803*np.pi)/4162854322176 + (4963101217555*n*np.pi)/(1711699968*l) - (2781714215215*np.pi*eta)/780730368)/chi**(22/3) + ((86771422906734395*np.pi)/32677398577152 - (6033875860440055*np.pi*eta)/1167049949184)/chi**7 + (1/(chi**(19/3)))*( - ((36873887275009221134023765*np.pi)/12976515386908092923904) - (272900019722212519495*n*np.pi)/(105681129090269184*l) + (1664283962654437115*np.pi*eta)/623334345080832) + ((616055512637722733*np.pi)/132238832173056 - (292997755491718561*np.pi*eta)/33059708043264)/chi**(53/9) + ( - ((1657908371989673247625*np.pi)/917742485425618944) - (1440942051181375*n*np.pi)/(394935865344*l) + (7812596619965525*np.pi*eta)/1891425779712)/chi**(47/9) + ( - ((2341521777112236925*np.pi)/610004935507968) + (10702863543278075*np.pi*eta)/1675837734912)/chi**(44/9) + ((115976875330365146420525*np.pi)/36200077437790715904 + (280538671697210501*n*np.pi)/(88165569318912*l) - (51133467198786559*np.pi*eta)/17968544907264)/chi**(38/9) + ( - ((279594780479556044255*np.pi)/145760537338970112) + (48634782568328640205*np.pi*eta)/19621610795630592)/chi**(34/9) + ((11134784227004313175*np.pi)/25994870568124416 + (805529084215*n*np.pi)/(827449344*l) - (20680348179051695*np.pi*eta)/21590424059904)/chi**(28/9) + ((203940414046321231*np.pi)/177874509496320 - (158334501890329*np.pi*eta)/97733246976)/chi**(25/9) + ( - ((774548060033375*np.pi)/1421713327104) - (8296791966665*n*np.pi)/(9671519232*l) + (26703843023285*np.pi*eta)/47788683264)/chi**(19/9)) + eta*( - ((65*np.pi)/9) - 65/9*np.pi*(np.log(f) - np.log(l))) - 1675/756*np.pi*(np.log(f) - np.log(l)) - (160*n*np.pi*(np.log(f) - np.log(l)))/(3*l)) + \
\
x**3 * (13966988843531/4694215680 + (257982425*n)/(508032*l) - (640*np.pi**2)/3 - (6848*gamma)/21 + ( - (20562265315/3048192) - (2393105*n)/(1512*l) + (23575*np.pi**2)/96 + (1845*n*np.pi**2)/(32*l))*eta + (110255/1728 + (475*n)/(24*l))*eta**2 - (127825*eta**3)/1296 - (13696*np.log(2))/21 - (3424*np.log(x))/21 +et0**2 * ((1/(chi**(31/9)))*( - (82471214720975/45625728024576) - (2153818055*n)/(524289024*l) + ( - (48415393035455/1629490286592) - (119702185*n)/(1560384*l))*eta + (906325428545/6466231296 + (32769775*n)/(222912*l))*eta**2 - (2330466575*eta**3)/16111872) + (24716497*np.pi**2)/(293760*chi**(28/9)) + (1/(chi**(25/9)))*(326505451793435/2061804036096 + (916703174045*n)/(5080610304*l) + ( - (13467050491570355/39689727694848) - (9519440485*n)/(35282016*l))*eta + ( - (2186530635995/52499639808) - (7198355375*n)/(45362592*l))*eta**2 + (2105566535*eta**3)/10606464) + 1/chi**(19/9)*(4175723876720788380517/5556561877278720000 + (534109712725265*n)/(2405438042112*l) - (21508213*np.pi**2)/276480 - (734341*gamma)/16800 + ( - (37399145056383727/28865256505344) - (1219797059185*n)/(2045440512*l) + (12111605*np.pi**2)/264192 + (639805*n*np.pi**2)/(22016*l))*eta + ( - (159596464273381/1718170030080) + (43766986495*n)/(1022720256*l))*eta**2 - (69237581*eta**3)/746496 - (9663919*np.log(2))/50400 + (4602177*np.log(3))/44800 - (734341*np.log(x))/33600) + 1/chi**(37/9)*( - (4165508390854487/16471063977984) - (96423905*np.pi**2)/5052672 + (2603845*gamma)/61404 + ( - (1437364085977/53477480448) + (3121945*np.pi**2)/561408)*eta + (4499991305*eta**2)/636636672 + (2425890995*eta**3)/68211072 + (1898287*np.log(2))/184212 + (12246471*np.log(3))/163744 + (2603845*np.log(x))/122808 - (2603845*np.log(chi))/184212)) +\
\
et0**6 * ((1/(chi**(23/3)))*(79743280932801358583/35798465743552512 + (4707297451617835*n)/(1132289528832*l) + ( - (4697965091339819013485/286387725948420096) - (3031112042005175*n)/(143782797312*l))*eta + (44260937463883607881/1136459229954048 + (62492948222105*n)/(2567549952*l))*eta**2 - (35025987744365*eta**3)/1171095552) + (398174549166095*np.pi**2)/(80486203392*chi**(22/3)) + 1/chi**7*(6322207219091430255435641803/677441730310696165441536 + (21433241144123966897449*n)/(2247709727898206208*l) + ( - (382703787518451715108530917/24194347511096291622912) - (163853568864047723579*n)/(20068836856233984*l))*eta + ( - (106526264171461811599015/7385331963094106112) - (1488820749618089075*n)/(73512222916608*l))*eta**2 + (34162866264153035*eta**3)/1782620356608) + 1/chi**(50/9)*( - (2183772179071687351051132225/883918168382772332199936) - (1897987377461640667975*n)/(380380109090881536*l) + (579230324539710961384384955/31568506013670440435712 + (58073101284937293475*n)/(2264167316017152*l))*eta + ( - (10549226416696214484085/247084515306897408) - (343159875555216425*n)/(12440479758336*l))*eta**2 + (1860567315439539235*eta**3)/59579912060928) - (39680793155110375*np.pi**2)/(6703350939648*chi**(47/9)) + 1/chi**(44/9)*( - (135365962984146442151489284759/10189239068667671944888320) - (37870519836609632882704205*n)/(2695565891181923794944*l) + (7853835483432029621933284961/363901395309559712317440 + (33994428248774224759285*n)/(2777025299981377536*l))*eta + (1356831692547764227006129/111081011999255101440 + (1130620204248677608895*n)/(61033523076513792*l))*eta**2 - (350432910788522809*eta**3)/18562130657280) + 1/chi**(31/9)*(34076287310129300818097225/179574315608305154654208 + (2465197344714118505*n)/(5716075764252672*l) + ( - (2537511568718810179185985/916195487797475278848) - (6975188758528085*n)/(1308625403904*l))*eta + (2244292522811400055685/279668952319131648 + (1181326509469325*n)/(186946486272*l))*eta**2 - (30328195477605980725*eta**3)/4877946842775552) + (10562258458043923*np.pi**2)/(7085660405760*chi**(28/9)) + 1/chi**(25/9)*(358510260983032848848845/89174443082328834048 + (1006560510293615881915*n)/(219739891107889152*l) + ( - (11101485749253028049541715/1716608029334830055424) - (40317372635313267425*n)/(9155828796162048*l))*eta + ( - (914845583455980713785/619266965849505792) - (441232051620619375*n)/(150920254881792*l))*eta**2 + (129063292052563975*eta**3)/35287451172864) + 1/chi**(19/3)*(580096325546747517323966372962837/10563010179869529959647150080 + (151645106281290420888707167*n)/(45364401583305546792960*l) - (1918746213416491*np.pi**2)/1000328527872 - (5813865129161*gamma)/815109120 + (276968936971755062954790967/16033421036455817379840 - (2022450572459665609*n)/(746979039313920*l) - (7714456204997411*np.pi**2)/5960450506752 + (27993947842265*n*np.pi**2)/(70957744128*l))*eta + ( - (662140667786869733841389/387729928062440570880) + (4063733530370815843*n)/(964041870704640*l))*eta**2 - (3388909956719855*eta**3)/813804945408 - (22635681300089561*np.log(2))/66023838720 + (18242991444087*np.log(3))/103505920 + (910126953125*np.log(5))/146313216 - (5813865129161*np.log(x))/1630218240) + 1/chi**(19/9)*(1411215114204927478714383769/231081850102765584384000 + (902530580917461918025*n)/(500177164724600832*l) - (7268851140841*np.pi**2)/11498029056 - (248175681337*gamma)/698664960 + ( - (63196514329101376128695/6002125976695209984) - (2061194773654925225*n)/(425320718303232*l) + (20466008454925*np.pi**2)/54935027712 + (1081132891925*n*np.pi**2)/(4577918976*l))*eta + ( - (53936742276439022617/71453880674942976) + (3892463014444925*n)/(11192650481664*l))*eta**2 - (116996625810085*eta**3)/155223392256 - (3265989073483*np.log(2))/2095994880 + (172815325821*np.log(3))/207011840 - (248175681337*np.log(x))/1397329920) + 1/chi**(38/9)*( - (10379351721540646849181594805679/161919052367007844977868800) - (283387636095953229229561*n)/(56895152487423344640*l) + (997069873657433*np.pi**2)/442674118656 + (703310680391*gamma)/87333120 + ( - (134039366792900201783629651/15020320256679762984960) + (1942168623322552430653*n)/(225774414632632320*l) + (9259177423989337*np.pi**2)/8195619446784 - (304665516874225*n*np.pi**2)/(496704208896*l))*eta + (48698463607596033748189/16255757853549527040 - (153000655663987637*n)/(48967845857280*l))*eta**2 + (163396563038941195*eta**3)/41832704212992 + (7038110304169369*np.log(2))/20173950720 - (370748969806671*np.log(3))/1992488960 + (703310680391*np.log(x))/174666240) + 1/chi**(56/9)*( - (95765636723679036324982133/3502538538798360821760) + (13756565834952955*np.pi**2)/4722815434752 + (45970619802497*gamma)/14348831616 + ( - (55011254544918787424693/2274375674544390144) + (20907767625235*np.pi**2)/16398664704)*eta + (463380478491174152645*eta**2)/27075900887433216 - (3879443939044136875*eta**3)/223153029292032 + (13266735591208763*np.log(2))/43046494848 - (726469287588495*np.log(3))/4251505664 + (45970619802497*np.log(x))/28697663232 - (45970619802497*np.log(chi))/43046494848) + 1/chi**(25/3)*( - (1844247076182880525/167330816851968) - (10225600094125*np.pi**2)/3832676352 + (249956266625*gamma)/139732992 + (2728185267249325/633828851712 + (299691309125*np.pi**2)/1277558784)*eta - (1304478350387875*eta**2)/80486203392 + (134782341955625*eta**3)/8623521792 + (182226181475*np.log(2))/419198976 + (130622307075*np.log(3))/41402368 + (249956266625*np.log(x))/279465984 - (249956266625*np.log(chi))/419198976) + 1/chi**(37/9)*(1720927919854684009084595897/40516888294827538513920 - (3986831179520597*np.pi**2)/8405059239936 - (1423526912698421*gamma)/255362042880 + (131543151853096063653535/6190510052685643776 - (775201866281389*np.pi**2)/466947735552)*eta - (174156473319672237061*eta**2)/96372409245106176 + (18782995537481836405*eta**3)/5162807638130688 - (233279096767651103*np.log(2))/766086128640 + (773344207011339*np.log(3))/4450754560 - (164052734375*np.log(5))/20959232 - (1423526912698421*np.log(x))/510724085760 + (1423526912698421*np.log(chi))/766086128640)))  )
        
        #note dtype=object will appear because it is dealing with number>=10^20 or number<=10^20
        #this is due to log
        #change the dtype of the array to float64 
        except Exception:
            print("")
        
        return( np.nan_to_num(psi.astype('float64')) )
    ###################COMMON_END######################
    
    ##################0PN_START######################
    def xi_l0(self):
        et = self.eccn()
        iota = self.iota_
        beta = self.beta_
        Fp = self.Fp_
        Fc = self.Fc_
        
         #calling class for Cx C+ Sx S+
        fn = h0CpxSpx2.Fn(et,iota,beta)

        #to find Xi
        Gamma_l = Fp*fn.cplus() + Fc*fn.ccross()
        Sigma_l = Fp*fn.splus() + Fc*fn.scross()

        al = np.sign(Gamma_l)*np.sqrt(Gamma_l**2 + Sigma_l**2)

        phil = np.zeros((10,3))
        for i in range(10):
            for j in range(3):
                if Gamma_l[i][j]==0:
                    phil[i][j] = -np.sign(Sigma_l[i][j])*np.pi/2 
                else:
                    phil[i][j] = np.arctan(- (Sigma_l[i][j]/Gamma_l[i][j]))            
        
        numerator = (1-et**2)**(7/4)
        denomitor = ( 1 + (73/24)*et**2 + (37/96)*et**4 )**(1/2)
        xil = (numerator/denomitor)*al*np.exp(-1j*phil)    
        
        return(xil)
 
    def htilde0(self):
        
        k = self.k_()
        
        xil = self.xi_l0()
        psi = self.psi_l
        l = np.arange(1,11,1)
        f = self.f_
        m1 = self.m1_
        m2 = self.m2_
        M = m1 + m2
        D = self.D_
        ff = C**3/(G*M*np.pi*6**(3/2))
        eta = (m1*m2)/(M**2)
        
        #frequency domain waveform
        s = np.sum( xil[:,0]*((l/2)**(2/3))*np.exp( -1j*(np.pi/4 + psi(0)) )*self.uniarray( (l-(l+0)*(k/(1+k))) ,ff,f) ) + \
        np.sum( xil[:,-2]*((l/2)**(2/3))*np.exp( -1j*(np.pi/4 + psi(-2)) )*self.uniarray( (l-(l-2)*(k/(1+k))) ,ff,f) ) + \
        np.sum( xil[:,2]*((l/2)**(2/3))*np.exp( -1j*(np.pi/4 + psi(2)) )*self.uniarray( (l-(l+2)*(k/(1+k))) ,ff,f) )
        
        hf0 = ((5*np.pi*eta)/384)**(1/2) * (G**2*M**2)/(C**5*D)*( ((G*M*np.pi*f)/C**3)**(-7/6) )*s
        
        return(hf0)
    
    ##################0PN_END######################

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
         
        
        