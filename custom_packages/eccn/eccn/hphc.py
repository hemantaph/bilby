#This code is written by Phurailatpam Hemantakumar, CUHK
#This code calculate plus and cross polarization strains given the following parameters 
#iota, beta, distance, frequency, initial frequency, initial eccentricity , phase of coalesence, time of coalesence, total mass, symmetric mass ratio, maximum allowed frequency, mass difference
#The two angles iota and beta specify the line of sight vector in a certain inertial fram

#I will avoid for loop and if else conditional statements through numpy operations
#numpy compile its code in 'C' in the background. So its faster than a normal operations.
import numpy as np
#precision can be set to match the result of mathematica motebook calculation
#np.set_printoptions(precision=17)

C = 299792458.0
G = 6.67408*1e-11
#Mass of the Sun
Mo = 1.989*1e30
#Mega parsec
Mpc = 3.086*1e22

#(* Euler-Gamma constant. Appears in 3PN corrections *) 
gamma = 0.5772156649 

#defining some repitative fractions
n_2b3 = 2./3.
n_1b3 = 1./3.
n_1b2 = 1./2.
n_2b2 = 2./2.
n_3b2 = 3./2.
n_4b2 = 4./2.
n_5b2 = 5./2.
n_6b2 = 6./2.
n_7b2 = 7./2.
n_8b2 = 8./2.
n_9b2 = 9./2.
n_10b2 = 10./2.
n_7b4 = 7./4.
Pi_ = np.pi
Pi_b4 = np.pi/4.
Pi_b2 = np.pi/2.

#log values
log_2 = np.log(2.)
log_3 = np.log(3.)
log_5 = np.log(5.)

    
#This funtion returns both plus and cross polarization states
def htilde(farray, M, eta, delta, et0, D, iota, beta, phic, tc, f0, ff, f_max):
    
    #defining the repeatative values
    #eta
    eta_2 = eta**2.
    eta_3 = eta**3.

    #et0_values
    et0_2 = et0**2.
    et0_3 = et0**3.
    et0_4 = et0**4.
    et0_5 = et0**5.
    et0_6 = et0**6.

    #defining some array which will be used for calculating et and psi
    #some et/psi elements are unnecessary to calculated 
    #because the range of l is different for each n
    #it means that not all [l,n] elements will contribute while solving the final waveform
    l = np.array([1,2,3,4,5,6,7,8,9,10]).astype('float')
    ll = np.array([ [1,1,1],\
                    [2,2,2],\
                    [3,3,3],\
                    [4,4,4],\
                    [5,5,5],\
                    [6,6,6],\
                    [7,7,7],\
                    [8,8,8],\
                    [9,9,9],\
                    [10,10,10] ]).astype('float')
    nn = np.array([ [0,-2,2],\
                    [0,-2,2],\
                    [0,-2,2],\
                    [0,-2,2],\
                    [0,-2,2],\
                    [0,-2,2],\
                    [0,-2,2],\
                    [0,-2,2],\
                    [0,-2,2],\
                    [0,-2,2] ]).astype('float')

    #log values                
    log_ll = np.log(ll).astype('float')

    #sinn_values
    sin_i = np.sin(iota)
    sin_2b = np.sin(2*beta)

    #cosinne_values
    cos_i = np.cos(iota)
    cos_2b = np.cos(2.*beta)

    length = len(farray)
    hp = np.zeros(length).astype('complex128')
    hc = np.zeros(length).astype('complex128')

    #slicing of frequency array which satisfy the coddition f_min <= f <= f_max
    #if f less than f_min, the eccentricity goes over 1
    #if f is greater than f_max it also pose problem but I will keep the value
    #the reason behind is that when different masses are pick from prior, f_max will change
    index = np.array(np.where( (farray >= f0) & (farray <= f_max) )).flatten()

    for idx in index:
        f = farray[idx]
        chi = f/f0

        #chi_values
        chi_2b3 = chi**(2/3)
        chi_4b3 = chi**(4/3)
        chi_7 = chi**7
        chi_19b3 = chi**(19/3)
        chi_19b9 = chi**(19/9)
        chi_22b3 = chi**(22/3)
        chi_23b3 = chi**(23/3)
        chi_25b9 = chi**(25/9)
        chi_28b9 = chi**(28/9)
        chi_31b9 = chi**(31/9)
        chi_38b9 = chi**(38/9)
        chi_44b9 = chi**(44/9)
        chi_47b9 = chi**(47/9)
        chi_50b9 = chi**(50/9)

        chi_9b2 = chi**(9/2)        
        chi_19b6 = chi**(19/6)
        chi_19b18 = chi**(19/18)
        chi_23b6 = chi**(23/6)
        chi_25b6 = chi**(25/6)
        chi_29b6 = chi**(29/6)
        chi_31b6 = chi**(31/6)
        chi_31b18 = chi**(31/18)
        chi_37b18 = chi**(37/18)
        chi_43b18 = chi**(43/18)
        chi_49b18 = chi**(49/18)
        chi_55b18 = chi**(55/18)
        chi_95b18 = chi**(95/18)
        chi_107b18 = chi**(107/18)
        chi_113b18 = chi**(113/18)
        chi_119b18 = chi**(119/18)
        chi_125b18 = chi**(125/18)
        chi_131b18 = chi**(131/18)

        chi_8 = chi**8
        chi_25b3 = chi**(25/3)
        chi_34b9 = chi**(34/9)
        chi_37b9 = chi**(37/9)
        chi_53b9 = chi**(53/9)
        chi_56b9 = chi**(56/9)

        #log values
        log_f = np.log(f)
        log_chi = np.log(chi)

        ############# k depends only on l , 1D array ################

        #x = ((G*M*2*Pi_*f)/( C**3 * l ))**(2/3)
        #Gmk will also be used later
        Gmk = ((G*M*2*Pi_*f)**(n_2b3))/(C**2)
        xk = Gmk * (l**(-n_2b3))

        #k values in form of 1D array, k[l-1,n] 
        k = (xk**2 * (27/2 - 7*eta + et0_6 * (1589015535/(5175296*chi_7) - (110496315*eta)/(184832*chi_7) + 498132560585/(1614692352*chi_19b3) + (168333575*eta)/(1478656*chi_19b3) - 908911888607/(1816528896*chi_44b9) + (4154545993*eta)/(4990464*chi_44b9) - 892815840919/(1816528896*chi_38b9) - (301299733*eta)/(4990464*chi_38b9) + 3110697122471/(14532231168*chi_25b9) - (12075357445*eta)/(39923712*chi_25b9) + 17781607555/(69866496*chi_19b9) - (82799465*eta)/(2495232*chi_19b9)) + et0_4 * ( - (6830363/(153216*chi_44b9)) + (474967*eta)/(5472*chi_44b9) - 268677653/(3983616*chi_38b9) - (90671*eta)/(10944*chi_38b9) + 18185905/(284544*chi_25b9) - (267133*eta)/(2736*chi_25b9) + 34967929/(306432*chi_19b9) - (162827*eta)/(10944*chi_19b9)) + et0_2 * (2833/(336*chi_25b9) - (197*eta)/(12*chi_25b9) + 10523/(336*chi_19b9) - (49*eta)/(12*chi_19b9))) + xk * (3 + et0_4 * ( - (2411/(304*chi_38b9)) + 3323/(304*chi_19b9)) + et0_6 * (1682685/(46208*chi_19b3) - 8011753/(138624*chi_38b9) + 1689785/(69312*chi_19b9)) + (3 * et0_2)/chi_19b9) + xk**(n_5b2) * ( - ((377 * et0_2*Pi_*( - 1 + chi))/(24*chi_28b9)) - (et0_4 * Pi_*(3635788 - 2258257*chi - 3883073*chi_19b9 + 2505542*chi_28b9))/(43776*chi_47b9) - (et0_6 * Pi_*( - 331142311890 + 189286331247*chi + 446685572185*chi_19b9 - 217621452319*chi_28b9 - 161105816843*chi_38b9 + 73897677620*chi_47b9))/(578893824*chi_22b3)) + xk**3 * (1/32*(2160 - 5192*eta + 123*Pi_**2*eta + 224*eta_2) + 1/(1016064*chi_31b9) * et0_2 * ( - 1193251 - 22282512*eta + 42700560*eta_2 + 89434977*chi_2b3 - 185795232*eta*chi_2b3 + 22703856*eta_2*chi_2b3 + 285923842*chi_4b3 - 477003408*eta*chi_4b3 + 12692862*Pi_**2*eta*chi_4b3 - 3424512*eta_2*chi_4b3) + 1/(84325183488*chi_50b9) * et0_4 * ( - 4759063292165 + 30348860970792*eta - 38763744107088*eta_2 - 31968879219858*chi_2b3 + 58318046249232*eta*chi_2b3 + 7646159215968*eta_2*chi_2b3 - 31736268138496*chi_4b3 + 45889671128952*eta*chi_4b3 - 1650389381550*Pi_**2*eta*chi_4b3 + 219411602592*eta_2*chi_4b3 + 2043730880707*chi_19b9 - 27141856655592*eta*chi_19b9 + 35073241576464*eta_2*chi_19b9 + 56262861824610*chi_25b9 - 93285988260024*eta*chi_25b9 + 11206302010176*eta_2*chi_25b9 + 86461368353906*chi_31b9 - 144242491555344*eta*chi_31b9 + 3838232618766*Pi_**2*eta*chi_31b9 - 1035548457216*eta_2*chi_31b9) + 1/(3999037501734912*chi_23b3) * et0_6 * (3279894679024104960 - 16631859540896308800*eta + 19202503791507079680*eta_2 + 10402025549836075155*chi_2b3 - 16414748179030197360*eta*chi_2b3 - 7473844435281260400*eta_2*chi_2b3 + 6636901757399139267*chi_4b3 - 6647849008784363016*eta*chi_4b3 + 341159644201429872*Pi_**2*eta*chi_4b3 + 623118469564347120*eta_2*chi_4b3 - 4220015697065866256*chi_19b9 + 21692272309533291648*eta*chi_19b9 - 23329096412641114368*eta_2*chi_19b9 - 17016310487961012648*chi_25b9 + 26221595034201700224*eta*chi_25b9 + 3477817715529865344*eta_2*chi_25b9 - 10967800378519109632*chi_31b9 + 15859103224796779584*eta*chi_31b9 - 570361367148627600*Pi_**2*eta*chi_31b9 + 75826894562974464*eta_2*chi_31b9 + 493039468942823701*chi_38b9 - 6093524899450135056*eta*chi_38b9 + 7224047870706816240*eta_2*chi_38b9 + 8936345368795116909*chi_44b9 - 13792229587322482296*eta*chi_44b9 + 1646334720273668880*eta_2*chi_44b9 + 9145059780731944160*chi_50b9 - 15256596481285635840*eta*chi_50b9 + 405971677516073760*Pi_**2*eta*chi_50b9 - 109530449579765760*eta_2*chi_50b9)) )


        kk = np.array([ [k[0],k[0],k[0]],\
                        [k[1],k[1],k[1]],\
                        [k[2],k[2],k[2]],\
                        [k[3],k[3],k[3]],\
                        [k[4],k[4],k[4]],\
                        [k[5],k[5],k[5]],\
                        [k[6],k[6],k[6]],\
                        [k[7],k[7],k[7]],\
                        [k[8],k[8],k[8]],\
                        [k[9],k[9],k[9]] ]).astype('float')


        #################unitary function, unit( l-1 , n ), 2D array################### 
        unit = np.zeros((10,3))

        buffer = ( ll-(ll+nn)*(kk/(1+kk)) )*ff - 2*f
        unit[buffer>=0] = 1.0

        ###############################################################################
        #x = (G*M*2*Pi_*f)/( C**3*(l - (l + n)*k/(1 + k))))**(2/3)
        #below abs is put because 2/3 power of a negative value is NaN.
        #this value will be taken care by the unistep function. 
        #negative value correspond to 0 of unistep function
        x = Gmk * (np.abs(ll - (ll + nn)*kk/(1 + kk)))**(-n_2b3)

        #x values
        #these values will be used in calculating et and psi
        x_3b2 = x**(n_3b2)
        x_5b2 = x**(n_5b2)
        x_2 = x**2
        x_3 = x**3
        log_x = np.log(x)

        ##################eccentricity 2D array (n,l)##################

        #calculating some terms which will later use for calculating et
        a_3b2 = et0_5 * ((94739615555*Pi_)/(958169088*chi_113b18)-(1586634546601*Pi_)/(27786903552*chi_95b18)-(1422200801*Pi_)/(13307904*chi_25b6)+(1318556431*Pi_)/(26615808*chi_19b6)+(607032981553*Pi_)/(27786903552*chi_37b18)-(6029825087*Pi_)/(958169088*chi_19b18))+et0_3 * (-((1252771*Pi_)/(87552*chi_25b6))+(396797*Pi_)/(43776*chi_19b6)+(1315151*Pi_)/(131328*chi_37b18)-(1252771*Pi_)/(262656*chi_19b18))+et0 * ((377*Pi_)/(144*chi_37b18)-(377*Pi_)/(144*chi_19b18))

        a_1 = et0 * ((2833/2016-(197*eta)/72)/chi_31b18+(-(2833/2016)+(197*eta)/72)/chi_19b18)+et0_3 * ((-(9414059/1225728)+(654631*eta)/43776)/chi_23b6+(11412055/5311488-(378697*eta)/43776)/chi_19b6+(386822573/47803392-(1482433*eta)/131328)/chi_31b18+(-(9414059/3677184)+(654631*eta)/131328)/chi_19b18)+et0_5 * ((711929259595/13414367232-(49505846855*eta)/479084544)/chi_107b18+(-(1182747028465/174386774016)+(24493152461*eta)/479084544)/chi_95b18+(-(699589093187/9688154112)+(3092267495*eta)/26615808)/chi_23b6+(37922258765/3229384704-(1258410131*eta)/26615808)/chi_19b6+(3061519891285/174386774016-(11147601665*eta)/479084544)/chi_31b18+(-(45311656423/13414367232)+(3150863507*eta)/479084544)/chi_19b18)

        a_5b2 = et0_5 * (((158961967498087*Pi_)/275952697344-(773693508027443*Pi_*eta)/482917220352)/chi_125b18+(-((171498319127425*Pi_)/1931668881408)+(46169592388985*Pi_*eta)/68988174336)/chi_113b18+(-((22474678352603165*Pi_)/56018397560832)+(1562835028401985*Pi_*eta)/2000657055744)/chi_107b18+((966616778184203239*Pi_)/2392785838669824-(102851838418889831*Pi_*eta)/322105785974784)/chi_95b18+(-((156129856813559*Pi_)/178858229760)+(70761454761383*Pi_*eta)/44714557440)/chi_29b6+((697744454755*Pi_)/5536088064-(162077392939*Pi_*eta)/319389696)/chi_25b6+((83537422031093*Pi_)/232515698688-(369245400305*Pi_*eta)/638779392)/chi_23b6+(-((6837459307169*Pi_)/19873136640)+(7877941103477*Pi_*eta)/44714557440)/chi_19b6+((3611887558130624419*Pi_)/11963929193349120-(517791739629486467*Pi_*eta)/1610528929873920)/chi_49b18+(-((1719724436739649*Pi_)/56018397560832)+(119585497365941*Pi_*eta)/2000657055744)/chi_37b18+(-((88784076847265*Pi_)/1931668881408)+(4202645827705*Pi_*eta)/68988174336)/chi_31b18+((158367949859977*Pi_)/9658344407040-(3240255264059*Pi_*eta)/2414586101760)/chi_19b18)+et0_3 * ((-((12693032573*Pi_)/294174720)+(11292740311*Pi_*eta)/73543680)/chi_29b6+((330949595*Pi_)/19611648-(142768769*Pi_*eta)/2101248)/chi_25b6+((1124125901*Pi_)/29417472-(78169009*Pi_*eta)/1050624)/chi_23b6+(-((2057616403*Pi_)/32686080)+(2370731599*Pi_*eta)/73543680)/chi_19b6+((195499289159*Pi_)/2647572480-(65776041763*Pi_*eta)/661893120)/chi_49b18+(-((3725822783*Pi_)/264757248)+(259084747*Pi_*eta)/9455616)/chi_37b18+(-((11217854617*Pi_)/529514496)+(558877241*Pi_*eta)/18911232)/chi_31b18+((32902907141*Pi_)/2647572480-(673203247*Pi_*eta)/661893120)/chi_19b18)+et0 * (((778843*Pi_)/1451520-(4996241*Pi_*eta)/362880)/chi_49b18+(-((1068041*Pi_)/290304)+(74269*Pi_*eta)/10368)/chi_37b18+(-((1068041*Pi_)/290304)+(74269*Pi_*eta)/10368)/chi_31b18+((9901567*Pi_)/1451520-(202589*Pi_*eta)/362880)/chi_19b18)

        a_2 = et0 * ((-(28850671/24385536)+(27565*eta)/145152+(33811*eta_2)/10368)/chi_43b18+(-(8025889/4064256)+(558101*eta)/72576-(38809*eta_2)/5184)/chi_31b18+(77006005/24385536-(1143767*eta)/145152+(43807*eta_2)/10368)/chi_19b18)+et0_3 * ((-(9164199307/2118057984)+(1205846917*eta)/29417472-(13714021*eta_2)/233472)/chi_9b2+(32330351815/3569319936-(10345778159*eta)/191213568+(74603309*eta_2)/1050624)/chi_23b6+(8180980796033/1349202935808+(14604819923*eta)/2676989952-(317361763*eta_2)/14708736)/chi_19b6+(-(20952382669619/4047608807424)-(385200824731*eta)/24092909568+(4301644427*eta_2)/132378624)/chi_43b18+(-(1095868349309/96371638272)+(65400285919*eta)/1720922112-(292039301*eta_2)/9455616)/chi_31b18+(255890954615/44479217664-(3800737741*eta)/264757248+(145570661*eta_2)/18911232)/chi_19b18)+et0_5 * ((16952610560003855/162260186038272-(79153315354555*eta)/137976348672+(47507268174605*eta_2)/68988174336)/chi_119b18+(-(16753611658206725/351563736416256)+(2837648691484435*eta)/6277923864576-(24125755174085*eta_2)/34494087168)/chi_107b18+(-(7937050519029473999/191953800083275776)-(1089957759112387*eta)/87890934104064+(1121044759543031*eta_2)/6277923864576)/chi_95b18+(-(25186092424407371/273438461657088)+(936816311138573*eta)/1627609890816-(1951606822255*eta_2)/2980970496)/chi_9b2+(2402572738143295/28211904774144-(55792908667709*eta)/116257849344+(352402173805*eta_2)/638779392)/chi_23b6+(27185399185217659/820315384971264+(48531816604129*eta)/1627609890816-(1054593138449*eta_2)/8942911488)/chi_19b6+(-(4719697288288984795/191953800083275776)-(4676818769915975*eta)/87890934104064+(669607180808035*eta_2)/6277923864576)/chi_43b18+(-(8673285852010405/351563736416256)+(506837220151715*eta)/6277923864576-(2196077528005*eta_2)/34494087168)/chi_31b18+(1231651832357155/162260186038272-(18293673608177*eta)/965834440704+(700659277417*eta_2)/68988174336)/chi_19b18)

        a_3 = et0_3 * ((31472267987495/6167784849408-(318662569276073*eta)/4625838637056+(4844584781833*eta_2)/18356502528-(1562882519*eta_3)/5603328)/chi_9b2+(149592469*Pi_**2)/(2101248*chi_25b6)+(23176718595161489/906664372862976-(866895029665039*eta)/32380870459392-(5814138473063*eta_2)/42831839232+(62520267311*eta_3)/353009664)/chi_23b6+(59358100103030627/8159979355766784+(2420024232862595*eta)/291427834134528-(103398129181999*eta_2)/1156459659264+(847423952119*eta_3)/9531260928)/chi_43b18-(495811927*Pi_**2)/(18911232*chi_37b18)+(29787660990550865/1165711336538112-(591234360321013*eta)/5947506819072+(107636760191*eta_2)/874119168-(64940942431*eta_3)/1361608704)/chi_31b18+1/chi_19b6*(152896024020300184249/67999827964723200-(95207357*Pi_**2)/8404992-(245954159*gamma)/766080+(12374839994637661*eta)/10793623486464-(116237911*Pi_**2*eta)/1400832-(3908281091711*eta_2)/128495517696-(42680326813*eta_3)/1059028992-(33962745773*log_2)/2298240+(5362264233*log_3)/680960-(245954159*log_x)/1532160)+1/chi_19b18*(-(110724557880778937/704550807797760)+(600535883*Pi_**2)/75644928+(11022391*gamma)/459648+(536131194179051*eta)/16012518359040+(13215571*Pi_**2*eta)/4202496-(1193082406697*eta_2)/38125043712+(35382609493*eta_3)/4084826112+(40178393*log_2)/6894720+(28800441*log_3)/680960+(11022391*log_x)/919296)+1/chi_55b18*(-(3881667007528080426037/2243994322835865600)+(720177509*Pi_**2)/75644928+(517414657*gamma)/2298240-(1395931720786001359*eta)/1457139170672640+(295851449*Pi_**2*eta)/4202496-(112681906698415*eta_2)/3469378977792-(1549239851389*eta_3)/28593782784+(101727523747*log_2)/6894720-(5477465997*log_3)/680960+(517414657*log_x)/4596480-(517414657*log_chi)/6894720)+1/chi_31b6*(-(99813874374700537/234850269265920)-(429547595*Pi_**2)/8404992+(11022391*gamma)/153216-(62659748948903*eta)/1779168706560+(13215571*Pi_**2*eta)/1400832-(95613034561*eta_2)/1412038656+(22151672941*eta_3)/151289856+(40178393*log_2)/2298240+(86401323*log_3)/680960+(11022391*log_x)/306432-(11022391*log_chi)/459648))+et0 * ((81733950943/49161240576-(6152132057*eta)/1755758592-(1348031*eta_2)/331776+(6660767*eta_3)/746496)/chi_43b18-(142129*Pi_**2)/(20736*chi_37b18)+(218158012165/49161240576-(34611934451*eta)/1755758592+(191583143*eta_2)/6967296-(8629979*eta_3)/746496)/chi_31b18+1/chi_19b18*(-(33320661414619/386266890240)+(180721*Pi_**2)/41472+(3317*gamma)/252+(161339510737*eta)/8778792960+(3977*Pi_**2*eta)/2304-(359037739*eta_2)/20901888+(10647791*eta_3)/2239488+(12091*log_2)/3780+(26001*log_3)/1120+(3317*log_x)/504)+1/chi_55b18*(216750571931393/2703868231680+(103537*Pi_**2)/41472-(3317*gamma)/252+(866955547*eta)/179159040-(3977*Pi_**2*eta)/2304-(130785737*eta_2)/20901888-(4740155*eta_3)/2239488-(12091*log_2)/3780-(26001*log_3)/1120-(3317*log_x)/504+(3317*log_chi)/756))+et0_5 * ((-(398940554960039073025/4252514955691032576)+(751550699250552365*eta)/614880704987136-(2712807799571918515*eta_2)/602680690999296+(23151784966473335*eta_3)/4967148552192)/chi_119b18-(103131245529065*Pi_**2)/(137976348672*chi_113b18)+(-(112428320602052499195835/386978860967883964416)+(6613733131933528864325*eta)/13820673605995855872+(6008938601459478835*eta_2)/4218764836995072-(1104229088149885535*eta_3)/452010518249472)/chi_107b18+(86495658134944405735/796252800345440256-(5011810129939409773*eta)/4490147370369024+(273844614114965969*eta_2)/78125274759168-(222409764901445*eta_3)/71543291904)/chi_9b2+(169823957639*Pi_**2)/(319389696*chi_25b6)+(1722336724789945193177/7166275203108962304-(43622763718525097819*eta)/255938400111034368-(93995440212410537*eta_2)/78125274759168+(295325748986095*eta_3)/214629875712)/chi_23b6+(13370902417722693924235/386978860967883964416+(5456578161604350265*eta)/727403873999781888-(95888813809642495*eta_2)/324520372076544+(131912614619182895*eta_3)/452010518249472)/chi_43b18-(7891428760189*Pi_**2)/(137976348672*chi_37b18)+(235755416055892166425/4252514955691032576-(4595658861880171685*eta)/21696504875974656+(22172511125256925*eta_2)/86097241571328-(488342986138655*eta_3)/4967148552192)/chi_31b18+1/chi_19b6*(508073487819457512259427/41343895402551705600-(316374047311*Pi_**2)/5110235136-(817305670357*gamma)/465776640+(41121593302180947503*eta)/6562523079770112-(386258578253*Pi_**2*eta)/851705856-(12987218067755653*eta_2)/78125274759168-(141826725999599*eta_3)/643889627136-(112858204203679*log_2)/1397329920+(17818804046259*log_3)/414023680-(817305670357*log_x)/931553280)+1/chi_19b18*(-(48448941430745732999/233654667895111680)+(2890493420551*Pi_**2)/275952697344+(53052864227*gamma)/1676795904+(2580501404154558247*eta)/58413666973777920+(63609056687*Pi_**2*eta)/15330705408-(5742532535283709*eta_2)/139080159461376+(170303228893721*eta_3)/14901445656576+(193386247021*log_2)/25151938560+(46207333359*log_3)/828047360+(53052864227*log_x)/3353591808)+1/chi_95b18*(-(1381494982108367906597498839/106419186766168090214400)+(210263419125757*Pi_**2)/1379763486720+(76993944487871*gamma)/41919897600-(459744548596452548880253*eta)/69103368029979279360+(36313178438959*Pi_**2*eta)/76653527040+(15325478660942336659*eta_2)/63281472554926080+(602052690061119545*eta_3)/1356031554748416+(11797275511817693*log_2)/125759692800-(196321353899121*log_3)/4140236800-(208984375*log_5)/86016+(76993944487871*log_x)/83839795200)+1/chi_55b18*(-(1077842077038057332046031457/106419186766168090214400)+(22839987538133*Pi_**2)/1379763486720+(56669035748389*gamma)/41919897600-(332702882500991633514587*eta)/69103368029979279360+(29987633672981*Pi_**2*eta)/76653527040-(9909009804994157899*eta_2)/63281472554926080-(394569227909087057*eta_3)/1356031554748416+(8507394273435727*log_2)/125759692800-(162397985681259*log_3)/4140236800+(208984375*log_5)/86016+(56669035748389*log_x)/83839795200-(56669035748389*log_chi)/125759692800)+1/chi_131b18*(10744314227409210983279/3598281885584719872+(168886055311895*Pi_**2)/275952697344-(833557837655*gamma)/1676795904-(854950976221006253*eta)/1668961913536512-(999414989555*Pi_**2*eta)/15330705408+(384051995415241885*eta_2)/139080159461376-(44332570043722025*eta_3)/14901445656576-(607690552613*log_2)/5030387712-(145200397527*log_3)/165609472-(833557837655*log_x)/3353591808+(833557837655*log_chi)/5030387712)+1/chi_31b6*(3632678520819467743258727/454782849428068761600-(2333251524667*Pi_**2)/5110235136-(451031617427*gamma)/465776640+(41341286137777666139*eta)/7572142015119360-(298427893387*Pi_**2*eta)/851705856-(142707649066100323*eta_2)/78125274759168+(1514475909193295*eta_3)/643889627136-(112591178603801*log_2)/1397329920+(18393027238917*log_3)/414023680-(451031617427*log_x)/931553280+(451031617427*log_chi)/1397329920))

        a_0 = et0_3 * (-(3323/(1824*chi_19b6))+3323/(1824*chi_19b18))+et0_5 * (50259743/(6653952*chi_95b18)-11042329/(1108992*chi_19b6)+15994231/(6653952*chi_19b18))+et0/chi_19b18        
        #this is the 2D et[l-1,n]
        #some et elements are unnecessary to calculated because the range of l is different for each n
        #it means that not all [l,n] elements will contribute while solving the final waveform
        #unit is multiply because some et values gives negative where unit=0
        #so, unit[l,n]=0 means et[l,n]=0. These elements will be droped anyway later
        et = ( x_3b2*(a_3b2) + x*(a_1) + x_5b2*(a_5b2) + x_2*(a_2) + a_0 + x_3*(a_3) )*unit

        #NOTE: et(n value, l-1)
        #if an error like dtype=object arises, then et = et.astype('float')
        et = et.astype('float')

        ###################fourier_phase 2D array#######################

        #psi[l-1,n] 2D array 
        psi = ( - 2*Pi_*f*tc + (ll - (ll + nn)*kk/(1 + kk))*phic - 1/(256*x_5b2*eta)*3*ll * (1 +\
        \
        x_3b2 * ( - 16*Pi_ + et0_2 * ( - ((295945*Pi_)/(35088*chi_28b9)) + (65561*Pi_)/(4080*chi_19b9)) + et0_4 * ((1968982405*Pi_)/(35961984*chi_47b9) - (6211173025*Pi_)/(102085632*chi_38b9) - (3048212305*Pi_)/(64000512*chi_28b9) + (217859203*Pi_)/(3720960*chi_19b9)) + et0_6 * ( - ((28409259125*Pi_)/(79847424*chi_22b3)) + (30628811474315*Pi_)/(97254162432*chi_19b3) + (33366234820475*Pi_)/(65594658816*chi_47b9) - (20639727962075*Pi_)/(46551048192*chi_38b9) - (126468066221755*Pi_)/(846342770688*chi_28b9) + (22156798877*Pi_)/(169675776*chi_19b9))) +\
            \
            x * ( - (2585/756) - (25*nn)/(3*ll) + (55*eta)/9 + et0_6 * (( - (213483902125/1117863936) + (14845156625*eta)/39923712)/chi_7 + (223015085012407/2254879424512 + (13164724715*nn)/(71320832*ll) - (7378552295*eta)/32530432)/chi_19b3 + (1968906345873305/5969113952256 - (8999675405695*eta)/16398664704)/chi_44b9 + ( - (862351154377229525/6373211704344576) - (749497416275*nn)/(2742610176*ll) + (4063675549105*eta)/13134901248)/chi_38b9 + ( - (2441897241139735/21246121967616) + (9479155594325*eta)/58368466944)/chi_25b9 + (116789025584125/3112412663808 + (8448925*nn)/(99072*ll) - (216909251525*eta)/2585060352)/chi_19b9) + et0_4 * ((14796093245/503467776 - (1028884705*eta)/17980992)/chi_44b9 + ( - (259509826776175/13976341456896) - (225548425*nn)/(6014496*ll) + (1222893635*eta)/28804608)/chi_38b9 + ( - (14275935425/416003328) + (209699405*eta)/4000032)/chi_25b9 + (229668231175/13650932736 + (315685*nn)/(8256*ll) - (426556895*eta)/11337984)/chi_19b9) + et0_2 * (( - (2223905/491232) + (154645*eta)/17544)/chi_25b9 + (69114725/14968128 + (1805*nn)/(172*ll) - (128365*eta)/12432)/chi_19b9)) +\
                \
                x_2 * ( - (48825515/508032) - (31805*nn)/(252*ll) + (22105/504 - (10*nn)/ll)*eta + (3085*eta_2)/72 + et0_6 * (( - (26945014260125/52819070976) + (17350371000625*eta)/6707183616 - (357715525375*eta_2)/119771136)/chi_23b3 + (631801735840149031/757639486636032 + (37295665117595*nn)/(23963799552*ll) + ( - (167443372657006267/47352467914752) - (2593450768855*nn)/(855849984*ll))*eta + (1453574802115*eta_2)/390365184)/chi_7 + (2231629798479149401848091/2016195625924690968576 + (7565563411268608153*nn)/(6689612285411328*ll) + (3733620624128821835/13379224570822656 + (7557465734101975*nn)/(6126018576384*ll))*eta - (173415564792655*eta_2)/148551696384)/chi_19b3 + (43949506831840859555/63177102070677504 - (1344731894414361455*eta)/376054178992128 + (7946157848161165*eta_2)/2066231752704)/chi_50b9 + ( - (97831425453010633563475/83514566173731323904) - (85028471563286725*nn)/(35939163746304*ll) + (132713522808330046295/28679452669550592 + (388656700668275*nn)/(98733966336*ll))*eta - (2107245064767505*eta_2)/472856444928)/chi_44b9 + ( - (1193205495087383514152561/777567083994785710080) - (333815911878457549195*nn)/(205705577776398336*ll) + ( - (139449015255055034899/2314187749984481280) - (2180322429577675295*nn)/(1695375641014272*ll))*eta + (675785495945689*eta_2)/515614740480)/chi_38b9 + ( - (387035983120116605285/5846592827536441344) + (1095104635088909345*eta)/1338505683959808 - (185468261986684025*eta_2)/191215097708544)/chi_31b9 + (214994976177874485475/652560888744640512 + (15553485612355*nn)/(20771831808*ll) + ( - (14009852235779987735/11652873013297152) - (60376787225*nn)/(57065472*ll))*eta + (1550053258427425*eta_2)/1488994762752)/chi_25b9 + (194749034542453075/425320718303232 + (546781247071525*nn)/(1048057325568*ll) + ( - (122213388638482025/1364570637889536) + (61744532676875*nn)/(262014331392*ll))*eta - (18060683996675*eta_2)/61262936064)/chi_19b9) + et0_4 * ((3654447011975/98224939008 - (4300262795285*eta)/18124839936 + (392328884035*eta_2)/1294631424)/chi_50b9 + ( - (735191339256903775/7044076094275584) - (638978688025*nn)/(3031305984*ll) + (55579511401449335/125787073112064 + (44433039725*nn)/(108260928*ll))*eta - (240910046095*eta_2)/518482944)/chi_44b9 + ( - (359074780345285439107/1705190973672775680) - (100456187745548465*nn)/(451108723193856*ll) + ( - (41964795442387913/5074973135930880) - (656130734149165*nn)/(3717929037312*ll))*eta + (203366083643*eta_2)/1130734080)/chi_38b9 + ( - (94372278903235/7251965779968) + (126823556396665*eta)/733829870592 - (20940952805*eta_2)/93768192)/chi_31b9 + (1256913822951125/12777273040896 + (1727660975*nn)/(7727616*ll) + ( - (1182697961961875/3194318260224) - (25377635*nn)/(74304*ll))*eta + (34290527545*eta_2)/102041856)/chi_25b9 + (382978332618985/1865441746944 + (1075257552895*nn)/(4596742656*ll) + ( - (240335362454795/5984958938112) + (121422004625*nn)/(1149185664*ll))*eta - (35516739065*eta_2)/268697088)/chi_19b9) + et0_2 * ((936702035/1485485568 + (3062285*eta)/260064 - (14251675*eta_2)/631584)/chi_31b9 + (195802015925/15087873024 + (5113565*nn)/(173376*ll) + ( - (3656612095/67356576) - (355585*nn)/(6192*ll))*eta + (25287905*eta_2)/447552)/chi_25b9 + (115250777195/2045440512 + (323580365*nn)/(5040288*ll) + ( - (72324815665/6562454976) + (36539875*nn)/(1260072*ll))*eta - (10688155*eta_2)/294624)/chi_19b9)) +\
                    \
                    et0_6 * ( - (75356125/(3326976*chi_19b3)) + 17355248095/(455518464*chi_38b9) - 1326481225/(101334144*chi_19b9)) + et0_4 * (5222765/(998944*chi_38b9) - 2608555/(444448*chi_19b9)) - (2355*et0_2)/(1462*chi_19b9) +\
                    \
                    x_5b2 * ((14453*Pi_)/756 - (32*nn*Pi_)/ll + et0_2 * (( - ((7063901*Pi_)/520128) + (149064749*Pi_*eta)/2210544)/chi_34b9 + ((26056251325*Pi_)/1077705216 + (680485*nn*Pi_)/(12384*ll) - (48393605*Pi_*eta)/895104)/chi_28b9 + ((185734313*Pi_)/4112640 - (12915517*Pi_*eta)/146880)/chi_25b9 + ( - ((458370775*Pi_)/6837264) - (4909969*nn*Pi_)/(46512*ll) + (15803101*Pi_*eta)/229824)/chi_19b9) + et0_4 * (((14896370333*Pi_)/61544448 - (351697861441*Pi_*eta)/476969472)/chi_53b9 + ( - ((7525784976509075*Pi_)/38703714803712) - (85031756225*nn*Pi_)/(216521856*ll) + (461030900395*Pi_*eta)/1036965888)/chi_47b9 + ( - ((17596253179825*Pi_)/51451158528) + (1223601085925*Pi_*eta)/1837541376)/chi_44b9 + ((34901256494241693175*Pi_)/79386134731997184 + (84423313781887*nn*Pi_)/(193345546752*ll) - (15387742160333*Pi_*eta)/39404703744)/chi_38b9 + ( - ((2408172473789*Pi_)/6790791168) + (992200223893*Pi_*eta)/1697697792)/chi_34b9 + ((268377522549925*Pi_)/1965734313984 + (368891935*nn*Pi_)/(1188864*ll) - (498450665645*Pi_*eta)/1632669696)/chi_28b9 + ((238457223541*Pi_)/696563712 - (17513506613*Pi_*eta)/33488640)/chi_25b9 + ( - ((1523166085325*Pi_)/6235584768) - (16315826987*nn*Pi_)/(42418944*ll) + (52513704623*Pi_*eta)/209599488)/chi_19b9) + et0_6 * (( - ((34512939466525*Pi_)/13414367232) + (22598442827675*Pi_*eta)/3353591808)/chi_8 + ((6467437465359803*Pi_)/4162854322176 + (4963101217555*nn*Pi_)/(1711699968*ll) - (2781714215215*Pi_*eta)/780730368)/chi_22b3 + ((86771422906734395*Pi_)/32677398577152 - (6033875860440055*Pi_*eta)/1167049949184)/chi_7 + ( - ((36873887275009221134023765*Pi_)/12976515386908092923904) - (272900019722212519495*nn*Pi_)/(105681129090269184*ll) + (1664283962654437115*Pi_*eta)/623334345080832)/chi_19b3 + ((616055512637722733*Pi_)/132238832173056 - (292997755491718561*Pi_*eta)/33059708043264)/chi_53b9 + ( - ((1657908371989673247625*Pi_)/917742485425618944) - (1440942051181375*nn*Pi_)/(394935865344*ll) + (7812596619965525*Pi_*eta)/1891425779712)/chi_47b9 + ( - ((2341521777112236925*Pi_)/610004935507968) + (10702863543278075*Pi_*eta)/1675837734912)/chi_44b9 + ((115976875330365146420525*Pi_)/36200077437790715904 + (280538671697210501*nn*Pi_)/(88165569318912*ll) - (51133467198786559*Pi_*eta)/17968544907264)/chi_38b9 + ( - ((279594780479556044255*Pi_)/145760537338970112) + (48634782568328640205*Pi_*eta)/19621610795630592)/chi_34b9 + ((11134784227004313175*Pi_)/25994870568124416 + (805529084215*nn*Pi_)/(827449344*ll) - (20680348179051695*Pi_*eta)/21590424059904)/chi_28b9 + ((203940414046321231*Pi_)/177874509496320 - (158334501890329*Pi_*eta)/97733246976)/chi_25b9 + ( - ((774548060033375*Pi_)/1421713327104) - (8296791966665*nn*Pi_)/(9671519232*ll) + (26703843023285*Pi_*eta)/47788683264)/chi_19b9) + eta * ( - ((65*Pi_)/9) - 65/9*Pi_*(log_f - log_ll)) - 1675/756*Pi_*(log_f - log_ll) - (160*nn*Pi_*(log_f - log_ll))/(3*ll)) +\
                        \
                            x_3 * (13966988843531/4694215680 + (257982425*nn)/(508032*ll) - (640*Pi_**2)/3 - (6848*gamma)/21 + ( - (20562265315/3048192) - (2393105*nn)/(1512*ll) + (23575*Pi_**2)/96 + (1845*nn*Pi_**2)/(32*ll))*eta + (110255/1728 + (475*nn)/(24*ll))*eta_2 - (127825*eta_3)/1296 - (13696*log_2)/21 - (3424*log_x)/21 + et0_2 * (( - (82471214720975/45625728024576) - (2153818055*nn)/(524289024*ll) + ( - (48415393035455/1629490286592) - (119702185*nn)/(1560384*ll))*eta + (906325428545/6466231296 + (32769775*nn)/(222912*ll))*eta_2 - (2330466575*eta_3)/16111872)/chi_31b9 + (24716497*Pi_**2)/(293760*chi_28b9) + (326505451793435/2061804036096 + (916703174045*nn)/(5080610304*ll) + ( - (13467050491570355/39689727694848) - (9519440485*nn)/(35282016*ll))*eta + ( - (2186530635995/52499639808) - (7198355375*nn)/(45362592*ll))*eta_2 + (2105566535*eta_3)/10606464)/chi_25b9 + 1/chi_19b9*(4175723876720788380517/5556561877278720000 + (534109712725265*nn)/(2405438042112*ll) - (21508213*Pi_**2)/276480 - (734341*gamma)/16800 + ( - (37399145056383727/28865256505344) - (1219797059185*nn)/(2045440512*ll) + (12111605*Pi_**2)/264192 + (639805*nn*Pi_**2)/(22016*ll))*eta + ( - (159596464273381/1718170030080) + (43766986495*nn)/(1022720256*ll))*eta_2 - (69237581*eta_3)/746496 - (9663919*log_2)/50400 + (4602177*log_3)/44800 - (734341*log_x)/33600) + 1/chi_37b9*( - (4165508390854487/16471063977984) - (96423905*Pi_**2)/5052672 + (2603845*gamma)/61404 + ( - (1437364085977/53477480448) + (3121945*Pi_**2)/561408)*eta + (4499991305*eta_2)/636636672 + (2425890995*eta_3)/68211072 + (1898287*log_2)/184212 + (12246471*log_3)/163744 + (2603845*log_x)/122808 - (2603845*log_chi)/184212)) + et0_4 * (1/chi_50b9*( - (181582918442691290125/1374276523167055872) - (157819616198875*nn)/(591398019072*ll) + (1741702918744309017425/1521520436363526144 + (185709581143825*nn)/(109127015424*ll))*eta + ( - (18130335399490218365/6037779509379072) - (16942972137575*nn)/(7794786816*ll))*eta_2 + (91862546967565*eta_3)/37330771968) - (2341612230425*Pi_**2)/(3675082752*chi_47b9) + 1/chi_44b9*( - (1017258852718193648990131/859416250731078942720) - (284592379883138801345*nn)/(227358796489703424*ll) + (69311096542161812013731/30693437526109962240 + (17602484074819772515*nn)/(12179935526234112*ll))*eta + (3272123415010135297/2970715982008320 + (129257754627385505*nn)/(66922722671616*ll))*eta_2 - (40063118477671*eta_3)/20353213440) + 1/chi_31b9*(141251897794072110575/3786570420215611392 + (194154433667165*nn)/(2290094456832*ll) + ( - (11182467092862313645/19319236837834752) - (15348073704055*nn)/(13631514624*ll))*eta + (1038816664853665/594291769344 + (2534255435*nn)/(1741824*ll))*eta_2 - (147245442666235*eta_3)/102858190848) + (254578148953*Pi_**2)/(535818240*chi_28b9) + 1/chi_25b9*(2095939685244436475/1746053475139584 + (5884601777755325*nn)/(4302551126016*ll) + ( - (17381974915387486205/8402882349109248) - (527634379756765*nn)/(358545927168*ll))*eta + ( - (386694251193132845/933653594345472) - (9761006428375*nn)/(10342670976*ll))*eta_2 + (2855158909615*eta_3)/2418273792) + 1/chi_19b9*(13875930442343179788457991/5067584432078192640000 + (1774846575386055595*nn)/(2193759494406144*ll) - (71471791799*Pi_**2)/252149760 - (2440215143*gamma)/15321600 + ( - (124277359022363124821/26325113932873728) - (4053385627671755*nn)/(1865441746944*ll) + (40246863415*Pi_**2)/240943104 + (2126072015*nn*Pi_**2)/(20078592*ll))*eta + ( - (530339050780445063/1566971067432960) + (7654615585415*nn)/(49090572288*ll))*eta_2 - (230076481663*eta_3)/680804352 - (32113202837*log_2)/45964800 + (5097678057*log_3)/13619200 - (2440215143*log_x)/30643200) + 1/chi_38b9*( - (3123488330286080905561719773/355085641155718958284800) - (85280660877506238107*nn)/(124770071244349440*ll) + (300051120571*Pi_**2)/970776576 + (211649317*gamma)/191520 + ( - (40336854286157147692937/32939298808508252160) + (584462420500316711*nn)/(495119330334720*ll) + (2786391039419*Pi_**2)/17972849664 - (91683875075*nn*Pi_**2)/(1089263616*ll))*eta + (14654969487690651143/35648591784099840 - (46042929781519*nn)/(107385626880*ll))*eta_2 + (49171400252465*eta_3)/91738386432 + (2117998887803*log_2)/44241120 - (334711679031*log_3)/13108480 + (211649317*log_x)/383040) + 1/chi_56b9*(259620437372696563/159257838845952 + (691917129965*Pi_**2)/2589262848 - (558835855*gamma)/2030112 + ( - (245999063921173/13702378991616) - (20770936405*Pi_**2)/575391744)*eta + (255806950720535*eta_2)/326247118848 - (9022269087085*eta_3)/8738762112 - (12629690323*log_2)/188800416 - (27159422553*log_3)/55940864 - (558835855*log_x)/4060224 + (558835855*log_chi)/6090336) + 1/chi_37b9*(102453749612934666311/19868699733442560 - (598067688595*Pi_**2)/4608036864 - (36290762107*gamma)/56000448 + (6738669506224179365/2219101528670208 - (110934582115*Pi_**2)/512004096)*eta - (1484623162301215*eta_2)/6604468835328 + (128895671353745*eta_3)/217729741824 - (1140350944327*log_2)/24000192 + (1296725746149*log_3)/49778176 - (36290762107*log_x)/112000896 + (36290762107*log_chi)/168001344)) + et0_6 * (1/chi_23b3*(79743280932801358583/35798465743552512 + (4707297451617835*nn)/(1132289528832*ll) + ( - (4697965091339819013485/286387725948420096) - (3031112042005175*nn)/(143782797312*ll))*eta + (44260937463883607881/1136459229954048 + (62492948222105*nn)/(2567549952*ll))*eta_2 - (35025987744365*eta_3)/1171095552) + (398174549166095*Pi_**2)/(80486203392*chi_22b3) + 1/chi_7 * (6322207219091430255435641803/677441730310696165441536 + (21433241144123966897449*nn)/(2247709727898206208*ll) + ( - (382703787518451715108530917/24194347511096291622912) - (163853568864047723579*nn)/(20068836856233984*ll))*eta + ( - (106526264171461811599015/7385331963094106112) - (1488820749618089075*nn)/(73512222916608*ll))*eta_2 + (34162866264153035*eta_3)/1782620356608) + 1/chi_50b9*( - (2183772179071687351051132225/883918168382772332199936) - (1897987377461640667975*nn)/(380380109090881536*ll) + (579230324539710961384384955/31568506013670440435712 + (58073101284937293475*nn)/(2264167316017152*ll))*eta + ( - (10549226416696214484085/247084515306897408) - (343159875555216425*nn)/(12440479758336*ll))*eta_2 + (1860567315439539235*eta_3)/59579912060928) - (39680793155110375*Pi_**2)/(6703350939648*chi_47b9) + 1/chi_44b9*( - (135365962984146442151489284759/10189239068667671944888320) - (37870519836609632882704205*nn)/(2695565891181923794944*ll) + (7853835483432029621933284961/363901395309559712317440 + (33994428248774224759285*nn)/(2777025299981377536*ll))*eta + (1356831692547764227006129/111081011999255101440 + (1130620204248677608895*nn)/(61033523076513792*ll))*eta_2 - (350432910788522809*eta_3)/18562130657280) + 1/chi_31b9*(34076287310129300818097225/179574315608305154654208 + (2465197344714118505*nn)/(5716075764252672*ll) + ( - (2537511568718810179185985/916195487797475278848) - (6975188758528085*nn)/(1308625403904*ll))*eta + (2244292522811400055685/279668952319131648 + (1181326509469325*nn)/(186946486272*ll))*eta_2 - (30328195477605980725*eta_3)/4877946842775552) + (10562258458043923*Pi_**2)/(7085660405760*chi_28b9) + 1/chi_25b9*(358510260983032848848845/89174443082328834048 + (1006560510293615881915*nn)/(219739891107889152*ll) + ( - (11101485749253028049541715/1716608029334830055424) - (40317372635313267425*nn)/(9155828796162048*ll))*eta + ( - (914845583455980713785/619266965849505792) - (441232051620619375*nn)/(150920254881792*ll))*eta_2 + (129063292052563975*eta_3)/35287451172864) + 1/chi_19b3*(580096325546747517323966372962837/10563010179869529959647150080 + (151645106281290420888707167*nn)/(45364401583305546792960*ll) - (1918746213416491*Pi_**2)/1000328527872 - (5813865129161*gamma)/815109120 + (276968936971755062954790967/16033421036455817379840 - (2022450572459665609*nn)/(746979039313920*ll) - (7714456204997411*Pi_**2)/5960450506752 + (27993947842265*nn*Pi_**2)/(70957744128*ll))*eta + ( - (662140667786869733841389/387729928062440570880) + (4063733530370815843*nn)/(964041870704640*ll))*eta_2 - (3388909956719855*eta_3)/813804945408 - (22635681300089561*log_2)/66023838720 + (18242991444087*log_3)/103505920 + (910126953125*log_5)/146313216 - (5813865129161*log_x)/1630218240) + 1/chi_19b9*(1411215114204927478714383769/231081850102765584384000 + (902530580917461918025*nn)/(500177164724600832*ll) - (7268851140841*Pi_**2)/11498029056 - (248175681337*gamma)/698664960 + ( - (63196514329101376128695/6002125976695209984) - (2061194773654925225*nn)/(425320718303232*ll) + (20466008454925*Pi_**2)/54935027712 + (1081132891925*nn*Pi_**2)/(4577918976*ll))*eta + ( - (53936742276439022617/71453880674942976) + (3892463014444925*nn)/(11192650481664*ll))*eta_2 - (116996625810085*eta_3)/155223392256 - (3265989073483*log_2)/2095994880 + (172815325821*log_3)/207011840 - (248175681337*log_x)/1397329920) + 1/chi_38b9*( - (10379351721540646849181594805679/161919052367007844977868800) - (283387636095953229229561*nn)/(56895152487423344640*ll) + (997069873657433*Pi_**2)/442674118656 + (703310680391*gamma)/87333120 + ( - (134039366792900201783629651/15020320256679762984960) + (1942168623322552430653*nn)/(225774414632632320*ll) + (9259177423989337*Pi_**2)/8195619446784 - (304665516874225*nn*Pi_**2)/(496704208896*ll))*eta + (48698463607596033748189/16255757853549527040 - (153000655663987637*nn)/(48967845857280*ll))*eta_2 + (163396563038941195*eta_3)/41832704212992 + (7038110304169369*log_2)/20173950720 - (370748969806671*log_3)/1992488960 + (703310680391*log_x)/174666240) + 1/chi_56b9*( - (95765636723679036324982133/3502538538798360821760) + (13756565834952955*Pi_**2)/4722815434752 + (45970619802497*gamma)/14348831616 + ( - (55011254544918787424693/2274375674544390144) + (20907767625235*Pi_**2)/16398664704)*eta + (463380478491174152645*eta_2)/27075900887433216 -\
                            (3879443939044136875*eta_3)/223153029292032 + (13266735591208763*log_2)/43046494848 - (726469287588495*log_3)/4251505664 + (45970619802497*log_x)/28697663232 - (45970619802497*log_chi)/43046494848) + 1/chi_25b3*( - (1844247076182880525/167330816851968) - (10225600094125*Pi_**2)/3832676352 + (249956266625*gamma)/139732992 + (2728185267249325/633828851712 + (299691309125*Pi_**2)/1277558784)*eta - (1304478350387875*eta_2)/80486203392 + (134782341955625*eta_3)/8623521792 + (182226181475*log_2)/419198976 + (130622307075*log_3)/41402368 + (249956266625*log_x)/279465984 - (249956266625*log_chi)/419198976) + 1/chi_37b9*(1720927919854684009084595897/40516888294827538513920 - (3986831179520597*Pi_**2)/8405059239936 - (1423526912698421*gamma)/255362042880 + (131543151853096063653535/6190510052685643776 - (775201866281389*Pi_**2)/466947735552)*eta - (174156473319672237061*eta_2)/96372409245106176 + (18782995537481836405*eta_3)/5162807638130688 - (233279096767651103*log_2)/766086128640 + (773344207011339*log_3)/4450754560 - (164052734375*log_5)/20959232 - (1423526912698421*log_x)/510724085760 + (1423526912698421*log_chi)/766086128640)))))

        #note dtype=object will appear because it is dealing with number>=10^20 or number<=10^20
        #this is due to log
        #change the dtype of the array to float 
        # psi( n , l-1 )
        psi = np.array(psi).astype('float')   

        #########################################################################################
        #Various amplitudes due to harmonic contributions 
        #depends on et, iota and beta
        ###################cplus0, 2D array####################
        #Cp0[l-1,n]
        Cp0=np.zeros((10,3), dtype='float')

        Cp0[0,-2]=et[0,-2]**3*(-(13/16)*cos_2b-13/16*cos_i**2*cos_2b)+et[0,-2]**5*(-(5/384)*cos_2b-5/384*cos_i**2*cos_2b)+et[0,-2]*(3/2*cos_2b+3/2*cos_i**2*cos_2b)

        Cp0[1,-2]=-2*cos_2b-2*cos_i**2*cos_2b+et[1,-2]**4*(-(23/8)*cos_2b-23/8*cos_i**2*cos_2b)+et[1,-2]**6*(65/144*cos_2b+65/144*cos_i**2*cos_2b)+et[1,-2]**2*(5*cos_2b+5*cos_i**2*cos_2b)

        Cp0[2,-2]=et[2,-2]**5*(-(963/128)*cos_2b-963/128*cos_i**2*cos_2b)+et[2,-2]*(-(n_9b2)*cos_2b-9/2*cos_i**2*cos_2b)+et[2,-2]**3*(171/16*cos_2b+171/16*cos_i**2*cos_2b)

        Cp0[3,-2]=et[3,-2]**6*(-(101/6)*cos_2b-101/6*cos_i**2*cos_2b)+et[3,-2]**2*(-8*cos_2b-8*cos_i**2*cos_2b)+et[3,-2]**4*(20*cos_2b+20*cos_i**2*cos_2b)

        Cp0[4,-2]=et[4,-2]**3*(-(625/48)*cos_2b-625/48*cos_i**2*cos_2b)+et[4,-2]**5*(26875/768*cos_2b+26875/768*cos_i**2*cos_2b)

        Cp0[5,-2]=et[5,-2]**4*(-(81/4)*cos_2b-81/4*cos_i**2*cos_2b)+et[5,-2]**6*(2349/40*cos_2b+2349/40*cos_i**2*cos_2b)

        Cp0[6,-2]=et[6,-2]**5*(-((117649*cos_2b)/3840)-(117649*cos_i**2*cos_2b)/3840)

        Cp0[7,-2]=et[7,-2]**6*(-(2048/45)*cos_2b-2048/45*cos_i**2*cos_2b)


        Cp0[0,0]=et[0,0]*sin_i**2-1/8*et[0,0]**3*sin_i**2+1/192*et[0,0]**5*sin_i**2

        Cp0[1,0]=et[1,0]**2*sin_i**2-1/3*et[1,0]**4*sin_i**2+1/24*et[1,0]**6*sin_i**2

        Cp0[2,0]=9/8*et[2,0]**3*sin_i**2-81/128*et[2,0]**5*sin_i**2

        Cp0[3,0]=4/3*et[3,0]**4*sin_i**2-16/15*et[3,0]**6*sin_i**2

        Cp0[4,0]=625/384*et[4,0]**5*sin_i**2

        Cp0[5,0]=81/40*et[5,0]**6*sin_i**2


        Cp0[0,2]=et[0,2]**5*(47/768*cos_2b+47/768*cos_i**2*cos_2b)+et[0,2]**3*(7/48*cos_2b+7/48*cos_i**2*cos_2b)

        Cp0[1,2]=et[1,2]**6*(11/240*cos_2b+11/240*cos_i**2*cos_2b)+et[1,2]**4*(1/8*cos_2b+1/8*cos_i**2*cos_2b)

        Cp0[2,2]=et[2,2]**5*((153*cos_2b)/1280+(153*cos_i**2*cos_2b)/1280)

        Cp0[3,2]=et[3,2]**6*(11/90*cos_2b+11/90*cos_i**2*cos_2b)

        ###################splus0, 2D array####################
        Sp0=np.zeros((10,3), dtype='float')

        Sp0[0,-2]=et[0,-2]**3*(-(13/16)*sin_2b-13/16*cos_i**2*sin_2b)+et[0,-2]**5*(-(5/384)*sin_2b-5/384*cos_i**2*sin_2b)+et[0,-2]*(3/2*sin_2b+3/2*cos_i**2*sin_2b)

        Sp0[1,-2]=-2*sin_2b-2*cos_i**2*sin_2b+et[1,-2]**4*(-(23/8)*sin_2b-23/8*cos_i**2*sin_2b)+et[1,-2]**6*(65/144*sin_2b+65/144*cos_i**2*sin_2b)+et[1,-2]**2*(5*sin_2b+5*cos_i**2*sin_2b)

        Sp0[2,-2]=et[2,-2]**5*(-(963/128)*sin_2b-963/128*cos_i**2*sin_2b)+et[2,-2]*(-(n_9b2)*sin_2b-9/2*cos_i**2*sin_2b)+et[2,-2]**3*(171/16*sin_2b+171/16*cos_i**2*sin_2b)

        Sp0[3,-2]=et[3,-2]**6*(-(101/6)*sin_2b-101/6*cos_i**2*sin_2b)+et[3,-2]**2*(-8*sin_2b-8*cos_i**2*sin_2b)+et[3,-2]**4*(20*sin_2b+20*cos_i**2*sin_2b)

        Sp0[4,-2]=et[4,-2]**3*(-(625/48)*sin_2b-625/48*cos_i**2*sin_2b)+et[4,-2]**5*(26875/768*sin_2b+26875/768*cos_i**2*sin_2b)

        Sp0[5,-2]=et[5,-2]**4*(-(81/4)*sin_2b-81/4*cos_i**2*sin_2b)+et[5,-2]**6*(2349/40*sin_2b+2349/40*cos_i**2*sin_2b)

        Sp0[6,-2]=et[6,-2]**5*(-((117649*sin_2b)/3840)-(117649*cos_i**2*sin_2b)/3840)

        Sp0[7,-2]=et[7,-2]**6*(-(2048/45)*sin_2b-2048/45*cos_i**2*sin_2b)


        Sp0[0,2]=et[0,2]**3*(-(7/48)*sin_2b-7/48*cos_i**2*sin_2b)+et[0,2]**5*(-(47/768)*sin_2b-47/768*cos_i**2*sin_2b)

        Sp0[1,2]=et[1,2]**4*(-(1/8)*sin_2b-1/8*cos_i**2*sin_2b)+et[1,2]**6*(-(11/240)*sin_2b-11/240*cos_i**2*sin_2b)

        Sp0[2,2]=et[2,2]**5*(-((153*sin_2b)/1280)-(153*cos_i**2*sin_2b)/1280)

        Sp0[3,2]=et[3,2]**6*(-(11/90)*sin_2b-11/90*cos_i**2*sin_2b)

        ###################ccross0, 2D array####################
        Cx0=np.zeros((10,3), dtype='float')

        Cx0[0,-2]=-3*et[0,-2]*cos_i*sin_2b+13/8*et[0,-2]**3*cos_i*sin_2b+5/192*et[0,-2]**5*cos_i*sin_2b

        Cx0[1,-2]=4*cos_i*sin_2b-10*et[1,-2]**2*cos_i*sin_2b+23/4*et[1,-2]**4*cos_i*sin_2b-65/72*et[1,-2]**6*cos_i*sin_2b

        Cx0[2,-2]=9*et[2,-2]*cos_i*sin_2b-171/8*et[2,-2]**3*cos_i*sin_2b+963/64*et[2,-2]**5*cos_i*sin_2b

        Cx0[3,-2]=16*et[3,-2]**2*cos_i*sin_2b-40*et[3,-2]**4*cos_i*sin_2b+101/3*et[3,-2]**6*cos_i*sin_2b

        Cx0[4,-2]=625/24*et[4,-2]**3*cos_i*sin_2b-26875/384*et[4,-2]**5*cos_i*sin_2b

        Cx0[5,-2]=81/2*et[5,-2]**4*cos_i*sin_2b-2349/20*et[5,-2]**6*cos_i*sin_2b

        Cx0[6,-2]=(117649*et[6,-2]**5*cos_i*sin_2b)/1920

        Cx0[7,-2]=4096/45*et[7,-2]**6*cos_i*sin_2b


        Cx0[0,2]=-(7/24)*et[0,2]**3*cos_i*sin_2b-47/384*et[0,2]**5*cos_i*sin_2b

        Cx0[1,2]=-(1/4)*et[1,2]**4*cos_i*sin_2b-11/120*et[1,2]**6*cos_i*sin_2b

        Cx0[2,2]=-(153/640)*et[2,2]**5*cos_i*sin_2b

        Cx0[3,2]=-(11/45)*et[3,2]**6*cos_i*sin_2b

        ###################scross0_start, 2D array####################
        Sx0=np.zeros((10,3), dtype='float')

        Sx0[0,-2]=3*et[0,-2]*cos_i*cos_2b-13/8*et[0,-2]**3*cos_i*cos_2b-5/192*et[0,-2]**5*cos_i*cos_2b

        Sx0[1,-2]=-4*cos_i*cos_2b+10*et[1,-2]**2*cos_i*cos_2b-23/4*et[1,-2]**4*cos_i*cos_2b+65/72*et[1,-2]**6*cos_i*cos_2b

        Sx0[2,-2]=-9*et[2,-2]*cos_i*cos_2b+171/8*et[2,-2]**3*cos_i*cos_2b-963/64*et[2,-2]**5*cos_i*cos_2b

        Sx0[3,-2]=-16*et[3,-2]**2*cos_i*cos_2b+40*et[3,-2]**4*cos_i*cos_2b-101/3*et[3,-2]**6*cos_i*cos_2b

        Sx0[4,-2]=-(625/24)*et[4,-2]**3*cos_i*cos_2b+26875/384*et[4,-2]**5*cos_i*cos_2b

        Sx0[5,-2]=-(81/2)*et[5,-2]**4*cos_i*cos_2b+2349/20*et[5,-2]**6*cos_i*cos_2b

        Sx0[6,-2]=-((117649*et[6,-2]**5*cos_i*cos_2b)/1920)

        Sx0[7,-2]=-(4096/45)*et[7,-2]**6*cos_i*cos_2b


        Sx0[0,2]=-(7/24)*et[0,2]**3*cos_i*cos_2b-47/384*et[0,2]**5*cos_i*cos_2b

        Sx0[1,2]=-(1/4)*et[1,2]**4*cos_i*cos_2b-11/120*et[1,2]**6*cos_i*cos_2b

        Sx0[2,2]=-(153/640)*et[2,2]**5*cos_i*cos_2b

        Sx0[3,2]=-(11/45)*et[3,2]**6*cos_i*cos_2b



        ####################################################################################
        #for plus polarization Fp=1.0 and Fc=0.0
        ####################################################################################
        #Xi here incorporates the effect of unitary function. If unit[l,n]=0, then xi[l,n]=0
        
        ########## Xi0 0PN , 2D array ###########
        Gamma_l = Cp0
        Sigma_l = Sp0

        al = np.sign(Gamma_l)*np.sqrt(Gamma_l**2 + Sigma_l**2)
        phil = -np.sign(Sigma_l)*Pi_b2 
        phil[Gamma_l!=0] = np.arctan(- (Sigma_l[Gamma_l!=0]/Gamma_l[Gamma_l!=0])) 
        
        numerator = (1-et**2)**(n_7b4)
        denomitor = ( 1 + (73/24)*et**2 + (37/96)*et**4 )**(n_1b2)
        
        #Xi0 0PN
        xi0 = unit * (numerator/denomitor)*al*np.exp(-1j*phil)


        #Summary of following technique to calculate frequency domain waveform
        #hf0 = s1+s2+s3
        #where s terms depend on psi and xi 
        #hp = coeff*( coeff0PN*hf0 )

        ##########0PN#############
        #n = -2
        L1_Psi_Nm2_0 = ((n_1b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[0,-2]) )
        L2_Psi_Nm2_1 = ((n_2b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[1,-2]) )
        L3_Psi_Nm2_2 = ((n_3b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[2,-2]) )
        L4_Psi_Nm2_3 = ((n_4b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[3,-2]) )
        L5_Psi_Nm2_4 = ((n_5b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[4,-2]) )
        L6_Psi_Nm2_5 = ((n_6b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[5,-2]) )
        L7_Psi_Nm2_6 = ((n_7b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[6,-2]) )
        L8_Psi_Nm2_7 = ((n_8b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[7,-2]) )

        s1 = \
        xi0[0,-2]*L1_Psi_Nm2_0 +\
        xi0[1,-2]*L2_Psi_Nm2_1 +\
        xi0[2,-2]*L3_Psi_Nm2_2 +\
        xi0[3,-2]*L4_Psi_Nm2_3 +\
        xi0[4,-2]*L5_Psi_Nm2_4 +\
        xi0[5,-2]*L6_Psi_Nm2_5 +\
        xi0[6,-2]*L7_Psi_Nm2_6 +\
        xi0[7,-2]*L8_Psi_Nm2_7                                                                                                                                       
        #n = 2           
        L1_Psi_N2_0 = ((n_1b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[0,2]) )
        L2_Psi_N2_1 = ((n_2b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[1,2]) )
        L3_Psi_N2_2 = ((n_3b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[2,2]) )
        L4_Psi_N2_3 = ((n_4b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[3,2]) )

        s2 = \
        xi0[0,2]*L1_Psi_N2_0 +\
        xi0[1,2]*L2_Psi_N2_1 +\
        xi0[2,2]*L3_Psi_N2_2 +\
        xi0[3,2]*L4_Psi_N2_3

        #n = 0  
        L1_Psi_N0_0 = ((n_1b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[0,0]) )
        L2_Psi_N0_1 = ((n_2b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[1,0]) )
        L3_Psi_N0_2 = ((n_3b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[2,0]) )
        L4_Psi_N0_3 = ((n_4b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[3,0]) )
        L5_Psi_N0_4 = ((n_5b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[4,0]) )
        L6_Psi_N0_5 = ((n_6b2)**(n_2b3))*np.exp( -1j*(Pi_b4 + psi[5,0]) )

        s3 = \
        xi0[0,0]*L1_Psi_N0_0 +\
        xi0[1,0]*L2_Psi_N0_1 +\
        xi0[2,0]*L3_Psi_N0_2 +\
        xi0[3,0]*L4_Psi_N0_3 +\
        xi0[4,0]*L5_Psi_N0_4 +\
        xi0[5,0]*L6_Psi_N0_5

        hf0 = s1+s2+s3

        # final frequency domain strain with newtonian amplitude and 3PN fourier phase
        coeff = (((5*Pi_*eta)/384)**(n_1b2)) * (G**2*M**2)/(C**5*D)
        coeff0PN = (((G*M*Pi_*f)/C**3)**(-7/6))

        hp[idx] = coeff*( coeff0PN*hf0 )

        ####################################################################################
        #for cross polarization Fp=0.0 and Fc=1.0 
        ####################################################################################
        #Xi here incorporates the effect of unitary function. If unit[l,n]=0, then xi[l,n]=0

        ####### Xi0 0PN , 2D array ########
        Gamma_l = Cx0
        Sigma_l = Sx0

        al = np.sign(Gamma_l)*np.sqrt(Gamma_l**2 + Sigma_l**2)
        phil = -np.sign(Sigma_l)*Pi_b2 
        phil[Gamma_l!=0] = np.arctan(- (Sigma_l[Gamma_l!=0]/Gamma_l[Gamma_l!=0])) 

        #Xi0 0PN
        #numerator and denominator already define above in plus polarization
        xi0 = unit * (numerator/denomitor)*al*np.exp(-1j*phil)
        

        #Summary of following technique to calculate frequency domain waveform
        #hf1 = s1+s2+s3+s4+s5
        #hf0 = s1+s2+s3
        #hf05 = s1+s2+s3+s4
        #where s terms depend on psi and xi 
        #hc = coeff*( coeff0PN*hf0 + coeff05PN*hf05 + coeff1PN*hf1 )
 
        ##########0PN#############
        #n = -2
        s1 = \
        xi0[0,-2]*L1_Psi_Nm2_0 +\
        xi0[1,-2]*L2_Psi_Nm2_1 +\
        xi0[2,-2]*L3_Psi_Nm2_2 +\
        xi0[3,-2]*L4_Psi_Nm2_3 +\
        xi0[4,-2]*L5_Psi_Nm2_4 +\
        xi0[5,-2]*L6_Psi_Nm2_5 +\
        xi0[6,-2]*L7_Psi_Nm2_6 +\
        xi0[7,-2]*L8_Psi_Nm2_7                                                                                                                                       
        #n = 2           
        s2 = \
        xi0[0,2]*L1_Psi_N2_0 +\
        xi0[1,2]*L2_Psi_N2_1 +\
        xi0[2,2]*L3_Psi_N2_2 +\
        xi0[3,2]*L4_Psi_N2_3

        #n = 0  
        s3 = \
        xi0[0,0]*L1_Psi_N0_0 +\
        xi0[1,0]*L2_Psi_N0_1 +\
        xi0[2,0]*L3_Psi_N0_2 +\
        xi0[3,0]*L4_Psi_N0_3 +\
        xi0[4,0]*L5_Psi_N0_4 +\
        xi0[5,0]*L6_Psi_N0_5

        hf0 = s1+s2+s3

        hc[idx] = coeff*( coeff0PN*hf0 )

    # return(format(hp, '.6g'),format(hc, '.6g')) if you want toround off
    return(hp,hc)